TITLE:: Cell_Matrix
summary:: Matrice carrée d'oscillateurs en interaction
categories:: Extensions>Cell Grid
related:: Classes/Cell_Parms

DESCRIPTION::
Cell_Matrix est une grille carrée de Cell_Group (oscillateurs en interaction avec chaîne d'effets).
Chaque groupe prend ses entrées sur les sorties des cellules voisines, en ordre aléatoire.
Le module de sortie selectionné permet d'effectuer le rendu sur les sorties de SC.

CLASSMETHODS::

METHOD:: new
Crée et démarre une instance de Cell_Matrix.

ARGUMENT:: size
Taille de la grille (carré de size*size)

ARGUMENT:: volume
Gain global sur [0,1]

ARGUMENT:: renewalTime
Change une cellule toutes les renewalTime secondes

ARGUMENT:: outParms
Tableau qui précise le type de sortie.
Les paramètres peuvent être générés par Cell_Parms au moyen des méthodes
.outSum, .outWalk, .outFly, .outFlyCycle, .outFlyPan, .outFlyPanCycle, .outFlyTurtle, .outFlyTurtleCycle

ARGUMENT:: genParms
Soit nil (paramètres par défaut), soit un tableau qui peut être généré par Cell_Parms.gen.

ARGUMENT:: pipeParms
Soit nil (paramètres par défaut), soit un tableau qui peut être généré par Cell_Parms.pipe.

ARGUMENT:: modParms
Soit nil (paramètres par défaut), soit un tableau qui peut être généré par Cell_Parms.mod.

ARGUMENT:: rec
Soit nil (pas d'enregistrement), soit un tableau qui peut être généré par Cell_Parms.rec.

ARGUMENT:: stopAfter
Si non nil, permet de programmer l'arrêt du synthétiseur après stopAfter secondes de jeu.

returns:: une instance de Cell_Matrix

INSTANCEMETHODS::

METHOD:: newCell
Crée une nouvelle cellule.

ARGUMENT:: x
Abscisse de la cellule.

ARGUMENT:: y
Ordonnée de la cellule.

returns:: Un nouveau Cell_Group.

METHOD:: free
Arrête la grille et supprime toutes ses composantes

EXAMPLES::

code::
// arrête la simulation
a.free;

// exemples de base
a = Cell_Matrix(2, 0.75, 2, Cell_Parms.outSum);
a = Cell_Matrix(4, 0.75, 1, Cell_Parms.outSum);

// avec déplacement
a = Cell_Matrix(4, 0.75, 1, Cell_Parms.outWalk(1));
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outWalk(1));
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outWalk(2));

// avec altitude
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outFly(2, 0.125));
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outFlyPan(2, 0.125));

// avec programmation
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outFlyCycle(2, [1,1,2,2,3,3,4,4],[112,8]));
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [1,1,2,2,3,3,4,4],[112,8]));
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [4,4,1],[30,8,352]));

// la tortue !!! (déplacement en coordonnées polaires)
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outFlyTurtleCycle(0.5, 0.25, [1,1,2,2,3,3,4,4],[112,8]));
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outTurtle(0.125));

// de grosses grilles (40%-45% CPU sur Core i5 avec supernova)
a = Cell_Matrix(12, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [1,1,2,2,3,3,4,4,5,5,6,6],[52,8]));
(
a = Cell_Matrix(12, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [6,6,1,1,2,2,3,3,4,4,5,5],
	[[22]++(172!3)++[112,52],8!6].lace(12)));
)
a = Cell_Matrix(12, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [1,6],[352,8]));
a = Cell_Matrix(12, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [6,6,1],[30,8,352]));
// une très grosse grille (65-70% CPU, mêmes conditions)
a = Cell_Matrix(14, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [1,7],[412,8]));
// une grille encore plus grosse (80% CPU, mêmes conditions)
a = Cell_Matrix(16, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [1,8],[472,8]));

// avec tous les paramètres
// paramètres par defaut (sauf sortie audio)
(
a = Cell_Matrix(8, 0.75, 0.5,
	// sortie audio
	Cell_Parms.outFlyPanCycle(2, [4,4,1],[30,8,352]),
	// probabilités, bruit(max, oct-, oct+), aux, retard, FM, ringmod
	Cell_Parms.gen([0.5,0.5,0.5,0.5,0.5], 1, -3, 3, 1, 8, 1, 1),
	// chaîne d'effets
	Cell_Parms.pipe(2, 3, 1, 1, [0.0, 6.0], 2, [0.25,0.75], [0.25,0.75]),
	// modulateurs
	Cell_Parms.mod(0, 6),
	// enregistrement et terminaison
	nil, nil);
)

// avec terminaison
a = Cell_Matrix(8, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2, [4,4,1,1,2,2,3,3],[22,8]), stopAfter: 142);

// avec enregistrement
(
// paramètres standard
a = Cell_Matrix(12, 0.75, 0.5, Cell_Parms.outFlyPanCycle(2,
	// paramètres de programmation d'altitude
	[6,6,1,1,2,2,3,3,4,4,5,5,6],[22!6, 8!6].lace(12)++[8]),
	// paramètres d'enregistrement
	rec: Cell_Parms.rec(5, 5, 30*7), stopAfter: 30*7);
)
::

